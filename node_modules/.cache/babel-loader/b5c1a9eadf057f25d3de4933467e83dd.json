{"ast":null,"code":"var _jsxFileName = \"/Users/dongqingye/Desktop/project/light-bootstrap-dashboard-react-master/COVID-19-Tracking-System/src/components/MapComponent/Map.js\";\nimport React, { Fragment } from \"react\";\nimport { withGoogleMap, GoogleMap, withScriptjs, Marker, Circle } from \"react-google-maps\";\n\nconst Map = props => {\n  var options1 = {\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.8,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.35\n  };\n  var options2 = {\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.8,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.5\n  };\n  return React.createElement(GoogleMap, {\n    defaultZoom: props.zoom,\n    defaultCenter: props.center,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, props.places.map(place => {\n    place.radius = place.Confirmed;\n    place.options = options1;\n\n    if (place.Confirmed > 10000) {\n      place.radius = place.Confirmed % 10;\n      place.options = options2;\n    }\n\n    return React.createElement(Fragment, {\n      key: place.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(Circle, {\n      defaultCenter: {\n        lat: parseFloat(place.center.lat),\n        lng: parseFloat(place.center.lng)\n      },\n      radius: place.radius * 100,\n      options: place.options,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }));\n  }));\n};\n\nexport default withScriptjs(withGoogleMap(Map));","map":{"version":3,"sources":["/Users/dongqingye/Desktop/project/light-bootstrap-dashboard-react-master/COVID-19-Tracking-System/src/components/MapComponent/Map.js"],"names":["React","Fragment","withGoogleMap","GoogleMap","withScriptjs","Marker","Circle","Map","props","options1","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","options2","zoom","center","places","map","place","radius","Confirmed","options","id","lat","parseFloat","lng"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SACEC,aADF,EAEEC,SAFF,EAGEC,YAHF,EAIEC,MAJF,EAKEC,MALF,QAMO,mBANP;;AAQA,MAAMC,GAAG,GAAGC,KAAK,IAAI;AACjB,MAAIC,QAAQ,GAAC;AACTC,IAAAA,WAAW,EAAE,SADJ;AAETC,IAAAA,aAAa,EAAE,GAFN;AAGTC,IAAAA,YAAY,EAAE,CAHL;AAITC,IAAAA,SAAS,EAAE,SAJF;AAKTC,IAAAA,WAAW,EAAE;AALJ,GAAb;AAOA,MAAIC,QAAQ,GAAC;AACTL,IAAAA,WAAW,EAAE,SADJ;AAETC,IAAAA,aAAa,EAAE,GAFN;AAGTC,IAAAA,YAAY,EAAE,CAHL;AAITC,IAAAA,SAAS,EAAE,SAJF;AAKTC,IAAAA,WAAW,EAAE;AALJ,GAAb;AAOA,SACE,oBAAC,SAAD;AACE,IAAA,WAAW,EAAEN,KAAK,CAACQ,IADrB;AAEE,IAAA,aAAa,EAAER,KAAK,CAACS,MAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGT,KAAK,CAACU,MAAN,CAAaC,GAAb,CAAiBC,KAAK,IAAI;AACvBA,IAAAA,KAAK,CAACC,MAAN,GAAaD,KAAK,CAACE,SAAnB;AACAF,IAAAA,KAAK,CAACG,OAAN,GAAcd,QAAd;;AACA,QAAGW,KAAK,CAACE,SAAN,GAAgB,KAAnB,EAAyB;AACrBF,MAAAA,KAAK,CAACC,MAAN,GAAaD,KAAK,CAACE,SAAN,GAAgB,EAA7B;AACAF,MAAAA,KAAK,CAACG,OAAN,GAAcR,QAAd;AACH;;AAEH,WACE,oBAAC,QAAD;AAAU,MAAA,GAAG,EAAEK,KAAK,CAACI,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAQE,oBAAC,MAAD;AACE,MAAA,aAAa,EAAE;AACbC,QAAAA,GAAG,EAAEC,UAAU,CAACN,KAAK,CAACH,MAAN,CAAaQ,GAAd,CADF;AAEbE,QAAAA,GAAG,EAAED,UAAU,CAACN,KAAK,CAACH,MAAN,CAAaU,GAAd;AAFF,OADjB;AAKE,MAAA,MAAM,EAAEP,KAAK,CAACC,MAAN,GAAa,GALvB;AAME,MAAA,OAAO,EAAED,KAAK,CAACG,OANjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,CADF;AAmBD,GA3BA,CAJH,CADF;AAmCH,CAlDD;;AAoDA,eAAenB,YAAY,CAACF,aAAa,CAACK,GAAD,CAAd,CAA3B","sourcesContent":["import React, {Fragment} from \"react\";\nimport {\n  withGoogleMap,\n  GoogleMap,\n  withScriptjs,\n  Marker,\n  Circle\n} from \"react-google-maps\";\n\nconst Map = props => {\n    var options1={\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.8,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.35,\n    }\n    var options2={\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.8,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.5,\n    }\n    return (\n      <GoogleMap\n        defaultZoom={props.zoom}\n        defaultCenter={props.center}\n      >\n        {props.places.map(place => {\n            place.radius=place.Confirmed;\n            place.options=options1;\n            if(place.Confirmed>10000){\n                place.radius=place.Confirmed%10;\n                place.options=options2;\n            }  \n\n          return (\n            <Fragment key={place.id}>\n              {/* <Marker\n                position={{\n                  lat: parseFloat(place.center.lat),\n                  lng: parseFloat(place.center.lng)\n                }}\n              /> */}\n              \n              <Circle\n                defaultCenter={{\n                  lat: parseFloat(place.center.lat),\n                  lng: parseFloat(place.center.lng)\n                }}\n                radius={place.radius*100}\n                options={place.options}\n              />\n            </Fragment>\n          );\n        })}\n      </GoogleMap>\n    );\n}\n\nexport default withScriptjs(withGoogleMap(Map));\n"]},"metadata":{},"sourceType":"module"}